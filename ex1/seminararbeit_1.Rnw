\documentclass{article}
\usepackage{amsmath}

\setlength{\parindent}{0cm}

\begin{document}
\SweaveOpts{concordance=TRUE}


\section{Part I}

\subsection{}

R knows six different vector types, namely: logical, integer, real, complex, character (string) and raw. To give some examples for every type:

<<>>=
# define logical object
log <- TRUE
is.logical(log)

# define integer object
int <- 1:5
is.integer(int)

# define real (numeric double) object
real <- 2.5
is.double(real)

# define complex object
comp <- 1+2i
is.complex(comp)

# define character (string) object
char <- "a"
is.character(char)

# define raw object
rawd <- as.raw(22) # corresponds to 16
is.raw(rawd)
@

\subsection{}

Difference between generic and numeric vector:

\begin{itemize}
\item An \emph{atomic} vector contains only one single ``atomic'' data type in all entries. An example would be a vector which contains only integers.
\item A \emph{generic} vector (like a \texttt{list}) can contain different types of data. An example would be a vector which contains characters and numbers.
\end{itemize}

\subsection{}

To explain: \emph{A data frame is a list, but not evey list is a data frame.}

\begin{itemize}
\item A \texttt{list} is an object containing collections of objects. The types of the entries inside of the list can be different. It is for example allowed that a \texttt{list} contains a vector of real values (doubles) and a vector of characters. The length of the containing vectors can be \textbf{different}.
\item A \texttt{data frame} is an object containing colletions of objects. The types of the entries inside of the list can be different. The length of the vectors have to be \textbf{the same}. The \texttt{data frame} has a matrix-like structure.
\end{itemize}

\texttt{list} and \texttt{data frame} are very similar, but the \texttt{data frame} has one more restriction (same length of all vectors). That's why a \texttt{data frame} is always a list, but a \texttt{list} is not always a \texttt{data frame}.

\section{Part II}

For random number generation R uses pseudo-random numbers. Starting from an initial state, called \emph{seed state}, it will produce a deterministic sequence, which is used as random numbers. If we choose the same seed in every turn, we get the same results. To make the results of random numbers comparable, we first set the seed in a sepecific state, using \texttt{set.seed}.

<<>>=
# set seed state to specific state
set.seed(1)
@

After setting the seed, we define a vector with (pseudo-) random values. In this case we create $1 \cdot 10^8$ random values following normal distribution. Using the function \texttt{rnorm}, we create a distribution with mean $5$ and standard deviation of $10$ and saving them in a vector called \texttt{largeVector}.

%% TODO: change 1e6 to 1e8

<<>>=
# define vector with normal random values
largeVector <- rnorm(1e6, mean=5, sd=10)
@

The function \texttt{cumsum} calculates the cumulative sum of the values of the vector. It takes all elements one by one and calculates for this element the sum of all elements before, including the current element. These values will be the new elements of the new vector. Consider following example:

$$
\left(\begin{array}{ccc}1\\ 4\\ 3\end{array}\right) \quad \overset{\texttt{cumsum}}{\xrightarrow{\hspace*{1cm}}} \quad \left(\begin{array}{ccc}1\\ 5\\ 8\end{array}\right)
$$

In the the first line of the follwing snippet, it first calculates the \texttt{cumsum} of the whole vector \texttt{largeVector}. Afterwards it just takes the first 100 elements and saves them in vector \texttt{a}. In the second line, it first takes the 100 first elements of \texttt{largeVector} and calculates the \texttt{cumsum} afterwards, which is saved in vector \texttt{b}. The second line should be much faster (see below), even if the results is the same (see also below).

<<>>=
# get cumulative sum of the first 100 elements of largeVector
a <- cumsum(largeVector)[1:100]
b <- cumsum(largeVector[1:100])
@

As mentioned before, the results of vectors \texttt{a} and \texttt{b} should be the same. To check if all elements of the two vectors are exactly equal, we can use the function \texttt{identical}, where the result is \texttt{TRUE}.

<<>>=
# check if both methods lead to exactly same result
identical(a,b)
@

In the next step, we can compare the speed of the two ways to calculate the vectors \texttt{a} and \texttt{b}. To check the elapsed time while calculating we can use the function \texttt{system.time}, which gives us the CPU caluclation time.

<<>>=
# get CPU calulation time of first method
system.time(cumsum(largeVector)[1:100])
# get CPU calulation time of second method
system.time(cumsum(largeVector[1:100]))
@

The \emph{user} CPU time and the \emph{system} CPU time is a technical distinction in time running the R code and time used in operating system kernel on behalf of the R code. The interesing time is the \emph{elapsed} time, which is the sum of the \emph{user} time and the \emph{system} time. We can see that the first operation of taking the \texttt{cumsum} of the whole \texttt{largeVector} with $100$ million elements (and reducing the vector to $100$ elements afterwards) takes a lot more CPU calucaltion time than taking the \texttt{cumsum} of the first $100$ elements directly. The second method is much more efficient than the first method, because in the end we are only interested in the \texttt{cumsum} of the first $100$ elements of the vector.

\section{Part III}

We consider dataset from ``Munchner Mietspiegel 2003'' which contains $13$ variables about $2053$ flats in Munich. In the dataset the logical variables have following encoding: \lq yes\rq\ is $1$ and \lq no\rq\ is $0$. The variables are:

\begin{itemize}
\item \textbf{nm}: rent in EUR
\item \textbf{nmqm}: rent per $m^2$ in EUR
\item \textbf{wfl}: living space in $m^2$
\item \textbf{rooms}: number of rooms
\item \textbf{bj}: year of construction
\item \textbf{bez}: district
\item \textbf{wohngut}: good residential area (yes/no)
\item \textbf{wohnbest}: good residential area (yes/no)
\item \textbf{ww0}: water heating (yes/no)
\item \textbf{zh0}: central heating (yes/no)
\item \textbf{badkach0}: tiles in bathroom (yes/no)
\item \textbf{badextra}: optional extras in bathroom (yes/no)
\item \textbf{kueche}: luxury kitchen (yes/no)
\end{itemize}

\subsection{Data import and descriptive statistics}

First we read the data into our environment using \texttt{load} function. We will have a look to the raw data using \texttt{head} and we will get some first descriptive statistic information of the interval scaled variables using \texttt{summary} function.

<<>>=
load('miete.Rdata')
head(miete)
summary(miete$nm)
summary(miete$nmqm)
summary(miete$wfl)
summary(miete$rooms)
summary(miete$bj)
@

We get the \texttt{min}, the \texttt{max}, the first quantile, the third quantile, the \texttt{mean} and the \texttt{median}. If we also want to get some extra information like the standard deviation and maybe skew and kurtosis, we can use the \texttt{psych} library and the containing function \texttt{describe}. In this case we include all variables.

<<>>=
library(psych)
describe(miete)
@

With the above results we can also do a quick validation. The \texttt{min} and \texttt{max} of the logical (yes/no) variables should be $0$ and $1$ respectively, which is the case. To get the amount of missing values we can calulcate the \texttt{sum} of \texttt{is.na()}.

<<>>=
sum(is.na(miete))
@

There are no missing values in the whole dataset.

%% TODO: More validation? %%

\subsection{Identify relevant regressors and fit regression model}

To idenfity relevant regressors we can apply \texttt{lm()}, which calculates a linear model, to all variables. The first argument of the function is the formular. In our case we want to do a regression of the rent in EUR (\texttt{miete\$nm}) on all other variables (we can use the \texttt{.} to include all variables). In the second argument we set our dataset.

<<>>=
regrel <- lm(miete$nm ~ ., data = miete)
@

We can omit all variables which have no significant slope. To get the slope we can have a look to the \texttt{summary} of the result of the linear regression.

<<>>=
summary(regrel)
@

We would suggest to include all variables which are significant on a $99\%$ level (* or **). With the relevant variables we can fit the regression.

<<>>=
summary(lm(miete$nm ~ miete$nmqm + miete$wfl + miete$wohnbest +
             miete$ww0 + miete$kueche, data = miete))
@

\subsection{Discussion of model fit and interpretation}

%% TODO

\end{document}









